import os
import requests
import logging
import sqlite3
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext

#–ò—Å–ø–æ–ª—å–∑—É–µ–º .env
load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
HELIUS_API_KEY = os.getenv("HELIUS_API_KEY")
COLLECTION_ID = os.getenv("COLLECTION_ID")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_FOLDER = ".data"
DB_PATH = os.path.join(DB_FOLDER, "wallets.db")

# üîπ –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –±–∞–∑—ã, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if not os.path.exists(DB_FOLDER):
    os.makedirs(DB_FOLDER, exist_ok=True)

# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç."""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS wallets (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            wallet_address TEXT UNIQUE,
            has_nft INTEGER
        )
    """)
    conn.commit()
    conn.close()
    logging.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

def save_wallet(wallet_address: str, has_nft: bool):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ—à–µ–ª—ë–∫ –∏ –Ω–∞–ª–∏—á–∏–µ NFT –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO wallets (wallet_address, has_nft)
            VALUES (?, ?)
            ON CONFLICT(wallet_address) DO UPDATE SET has_nft = ?
        """, (wallet_address, int(has_nft), int(has_nft)))
        conn.commit()
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞: {e}")
    finally:
        conn.close()

# üîπ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(
    [[KeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å NFT")], [KeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ")]],
    resize_keyboard=True,
    one_time_keyboard=False,
)


async def check_nft(wallet_address: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ NFT –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ ID —É –∫–æ—à–µ–ª—å–∫–∞."""
    url = f"https://mainnet.helius-rpc.com/?api-key={HELIUS_API_KEY}"
    payload = {
        "jsonrpc": "2.0",
        "id": 1,
        "method": "getAssetsByOwner",
        "params": {
            "ownerAddress": wallet_address,
            "page": 1,
            "limit": 1000
        }
    }

    response = requests.post(url, json=payload)
    
    if response.status_code == 200:
        data = response.json()
        if "result" in data and "items" in data["result"]:
            nfts = data["result"]["items"]
            logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(nfts)} NFT –æ—Ç –∫–æ—à–µ–ª—å–∫–∞ {wallet_address}")
            
            for nft in nfts:
                if "grouping" in nft:
                    for group in nft["grouping"]:
                        if group["group_key"] == "collection" and group["group_value"] == COLLECTION_ID:
                            logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω NFT –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ {COLLECTION_ID}")
                            return True
    return False  # –ù–µ—Ç NFT –∏–∑ –Ω—É–∂–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏


async def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ NFT –Ω–∞ Solana.\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=keyboard,
    )


async def about_bot(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û –±–æ—Ç–µ'."""
    await update.message.reply_text("ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ NFT –Ω–∞ Solana-–∫–æ—à–µ–ª—å–∫–µ.")


async def request_wallet(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å NFT'."""
    await update.message.reply_text("üîπ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å Solana-–∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")


async def check_wallet(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞."""
    wallet_address = update.message.text.strip()
    
    if len(wallet_address) < 32 or len(wallet_address) > 44:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Solana-–∞–¥—Ä–µ—Å!")
        return
    
    await update.message.reply_text(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º NFT —É {wallet_address}...")

    has_nft = await check_nft(wallet_address)
    save_wallet(wallet_address, has_nft)

    if has_nft:
        await update.message.reply_text("‚úÖ –£ –∫–æ—à–µ–ª—å–∫–∞ –µ—Å—Ç—å NFT –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Trinity!")
    else:
        await update.message.reply_text("‚ùå –£ –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ—Ç NFT –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Trinity.")


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    init_db()
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º
    app.add_handler(CommandHandler("start", start, block=False))
    app.add_handler(CommandHandler("check", request_wallet, block=False))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.Text("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å NFT"), request_wallet))
    app.add_handler(MessageHandler(filters.Text("‚ÑπÔ∏è –û –±–æ—Ç–µ"), about_bot))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (—Å—á–∏—Ç–∞–µ–º –µ–≥–æ –∑–∞ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_wallet))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()


if __name__ == "__main__":
    main()